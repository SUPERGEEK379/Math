# -*- coding: utf-8 -*-
"""Circle_Band.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gP13PkrBlZPaskrplINK_OhtWzKG2oVd
"""

# prompt: write a code generate a diagram with N circles tangent to their neighbors whose centers form a regular polygon and draw an outside band touching all the circles.

import matplotlib.pyplot as plt
import numpy as np

def draw_circles_and_band(N):
    """Generates a diagram with N circles tangent to their neighbors,
       whose centers form a regular polygon, and an outside band
       touching all the circles.
    """

    # Calculate the radius of the circles
    radius = 1  # You can adjust this value

    # Calculate the angles of the circle centers
    angles = np.linspace(0, 2 * np.pi, N, endpoint=False)

    # Calculate the coordinates of the circle centers
    centers_x = radius * np.cos(angles)
    centers_y = radius * np.sin(angles)

    # Calculate the center and radius of the band
    band_radius = radius * (1 + 2 * np.sin(np.pi/N) ) # Band radius derived from geometry
    band_center = (0,0)

    # Create the plot
    fig, ax = plt.subplots()


    # Draw the circles
    for x, y in zip(centers_x, centers_y):
        circle = plt.Circle((x, y), radius, fill=False)
        ax.add_patch(circle)


    #Draw the band
    band = plt.Circle((band_center), band_radius, fill=False, linestyle='--')  # Dashed line for band
    ax.add_patch(band)

    # Set the axis limits
    ax.set_xlim([-band_radius*1.1, band_radius*1.1])
    ax.set_ylim([-band_radius*1.1, band_radius*1.1])

    # Set the aspect ratio
    ax.set_aspect('equal')

    # Display the plot
    plt.show()

# Example usage:
N = 6  # Number of circles
draw_circles_and_band(N)

# prompt: write a code to generate a diagram with N circles tangent to each other whose centers form a regular polygon and draw an outside band touching all the circles. Make sure the circles does not cross each other. Them must be tangent.

import matplotlib.pyplot as plt
import numpy as np

def draw_circles_and_band(N):
    """Generates a diagram with N circles tangent to their neighbors,
       whose centers form a regular polygon, and an outside band
       touching all the circles.
    """

    # Calculate the radius of the circles
    radius = 1  # You can adjust this value

    # Calculate the angles of the circle centers
    angles = np.linspace(0, 2 * np.pi, N, endpoint=False)

    # Calculate the coordinates of the circle centers
    centers_x = radius * np.cos(angles)
    centers_y = radius * np.sin(angles)

    # Calculate the center and radius of the band
    band_radius = radius * (1 + 2 * np.sin(np.pi / N) ) # Band radius derived from geometry
    band_center = (0, 0)

    # Create the plot
    fig, ax = plt.subplots()

    # Draw the circles
    for x, y in zip(centers_x, centers_y):
        circle = plt.Circle((x, y), radius, fill=False)
        ax.add_patch(circle)

    # Draw the band
    band = plt.Circle(band_center, band_radius, fill=False, linestyle='--')  # Dashed line for band
    ax.add_patch(band)

    # Set the axis limits
    ax.set_xlim([-band_radius * 1.1, band_radius * 1.1])
    ax.set_ylim([-band_radius * 1.1, band_radius * 1.1])

    # Set the aspect ratio
    ax.set_aspect('equal')

    # Display the plot
    plt.show()

# Example usage:
N = 6  # Number of circles
draw_circles_and_band(N)

# prompt: On a unit circle, for a given integer N, plot points an equal distance from each other on the unit circle, then draw a circle on that point with a diameter of the distance to neighboring points. Ask for input from user for N

import matplotlib.pyplot as plt
import numpy as np

def draw_circles_and_band(N):
    """Generates a diagram with N circles tangent to their neighbors,
       whose centers form a regular polygon, and an outside band
       touching all the circles.
    """

    # Calculate the radius of the circles
    radius = 1  # You can adjust this value

    # Calculate the angles of the circle centers
    angles = np.linspace(0, 2 * np.pi, N, endpoint=False)

    # Calculate the coordinates of the circle centers
    centers_x = radius * np.cos(angles)
    centers_y = radius * np.sin(angles)

    # Calculate the distance between neighboring points
    distance_between_points = 2 * radius * np.sin(np.pi / N)

    # Create the plot
    fig, ax = plt.subplots()

    # Draw the circles
    for x, y in zip(centers_x, centers_y):
        circle = plt.Circle((x, y), distance_between_points / 2, fill=False)
        ax.add_patch(circle)

    # Plot the points on the unit circle
    plt.scatter(centers_x, centers_y)


    # Set the axis limits
    ax.set_xlim([-1.5, 1.5])
    ax.set_ylim([-1.5, 1.5])

    # Set the aspect ratio
    ax.set_aspect('equal')

    # Display the plot
    plt.show()

# Get input from the user for N
N = int(input("Enter the number of points (N): "))

# Call the function to draw the circles
draw_circles_and_band(N)

# prompt: On a unit circle, for a given integer N, plot points an equal distance from each other on the unit circle, then draw a circle on that point with a diameter of the distance to neighboring points. Plot rectangles using the neighboring points as the long side.  Ask for input from user for N

import matplotlib.pyplot as plt
import numpy as np

def draw_circles_and_band(N):
    """Generates a diagram with N circles tangent to their neighbors,
       whose centers form a regular polygon, and an outside band
       touching all the circles.
    """

    # Calculate the radius of the unit circle
    radius = 1

    # Calculate the angles of the circle centers
    angles = np.linspace(0, 2 * np.pi, N, endpoint=False)

    # Calculate the coordinates of the circle centers
    centers_x = radius * np.cos(angles)
    centers_y = radius * np.sin(angles)

    # Calculate the distance between neighboring points
    distance_between_points = 2 * radius * np.sin(np.pi / N)

    # Create the plot
    fig, ax = plt.subplots()

    # Draw the circles with diameter equal to the distance between points
    for x, y in zip(centers_x, centers_y):
        circle = plt.Circle((x, y), distance_between_points / 2, fill=False)
        ax.add_patch(circle)

    # Plot the points on the unit circle
    plt.scatter(centers_x, centers_y)

    # Draw rectangles using neighboring points as the long side
    for i in range(N):
        x1, y1 = centers_x[i], centers_y[i]
        x2, y2 = centers_x[(i + 1) % N], centers_y[(i + 1) % N]
        width = distance_between_points
        height =  distance_between_points / 2 #height of rectangle
        rectangle = plt.Rectangle(((x1 + x2) / 2 - width / 2 , (y1 + y2) / 2 - height/2) , width, height, fill=False, angle=np.degrees(angles[i]) + 90)
        ax.add_patch(rectangle)


    # Set the axis limits
    ax.set_xlim([-1.5, 1.5])
    ax.set_ylim([-1.5, 1.5])

    # Set the aspect ratio
    ax.set_aspect('equal')

    # Display the plot
    plt.show()

# Get input from the user for N
N = int(input("Enter the number of points (N): "))

# Call the function to draw the circles and rectangles
draw_circles_and_band(N)

# prompt: plot a rectangle using the coordinates of the long edge end width as parameters

import matplotlib.pyplot as plt
import numpy as np

def draw_circles_and_rectangles(N):
    """Generates a diagram with N circles tangent to their neighbors,
       whose centers form a regular polygon, and rectangles connecting them.
    """

    radius = 1

    angles = np.linspace(0, 2 * np.pi, N, endpoint=False)
    dtheta = 360 / N
    itheta = (180 - dtheta)/2
    centers_x = radius * np.cos(angles)
    centers_y = radius * np.sin(angles)

    distance_between_points = 2 * radius * np.sin(np.pi / N)

    fig, ax = plt.subplots()

    for x, y in zip(centers_x, centers_y):
        circle = plt.Circle((x, y), distance_between_points / 2, fill=False)
        ax.add_patch(circle)

    plt.scatter(centers_x, centers_y)

    for i in range(N):
        x1, y1 = centers_x[i], centers_y[i]
        x2, y2 = centers_x[(i + 1) % N], centers_y[(i + 1) % N]
        width = distance_between_points  # width of the rectangle, which is the distance between points
        # Get user input for the height
        height = width/2
        rectangle = plt.Rectangle((x2, y2), width, height, fill=False, angle= -itheta + dtheta * i)
        ax.add_patch(rectangle)
#        rectangle = plt.Rectangle((x1, y1), width, height, fill=False)
        ax.add_patch(rectangle)

    ax.set_xlim([-2,2])
    ax.set_ylim([-2,2])
    ax.set_aspect('equal')
    plt.show()

N = int(input("Enter the number of points (N): "))
if N < 2:
    print("N must be at least 2")
else:
    draw_circles_and_rectangles(N)

